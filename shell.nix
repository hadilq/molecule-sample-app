let
  # pkgs = import <nixpkgs> {
  #     config.android_sdk.accept_license = true;
  #     config.allowUnfree = true;
  # };
  pkgs = import (
      fetchTarball https://github.com/nixos/nixpkgs/tarball/dbc00be4985fdef654656092feb35ca2412f2a2b
    ) {
      config.android_sdk.accept_license = true;
      config.allowUnfree = true;
    };

  android = {
    versions = {
      platformTools = "33.0.2";
      buildTools = [
        "30.0.3"
        "31.0.0"
      ];
      ndk = "24.0.8215888"
      ;
      cmake = "3.10.2";
      emulator = "31.3.9";
    };

    platforms = [ "27" "28" "29" "30" "31" "32" ];
    abis = [ "x86" "x86_64" ]; # "armeabi-v7a" "arm64-v8a"
    extras = [ "extras;google;gcm" ];
  };

  sdkArgs = {
    platformToolsVersion = android.versions.platformTools;
    buildToolsVersions = android.versions.buildTools;
    includeEmulator = true;
    emulatorVersion = android.versions.emulator;
    platformVersions = android.platforms;
    includeSources = true;
    includeSystemImages = true;
    systemImageTypes = [ "google_apis_playstore" ];
    abiVersions = android.abis;
    cmakeVersions = [ android.versions.cmake ];
    includeNDK = true;
    ndkVersions = [ android.versions.ndk ];
    useGoogleAPIs = false;
  };

  androidComposition = pkgs.androidenv.composeAndroidPackages sdkArgs;

  androidEmulator = pkgs.androidenv.emulateApp {
    name = "emulate-android-nix";
    platformVersion = "31";
    abiVersion = "x86";
    systemImageType = "google_apis_playstore";
    sdkExtraArgs = sdkArgs;
  };
  
  androidSdk = androidComposition.androidsdk;
  androidSdkHome = "${androidSdk}/libexec/android-sdk";
  platformTools = androidComposition.platform-tools;
  jdk = "${pkgs.android-studio.unwrapped}/jre";
  aapt2 = "${androidSdkHome}/build-tools/${builtins.toString (builtins.tail android.versions.buildTools)}/aapt2";
  userHome = "${builtins.toString ./.user-home}";
  runEmulator = "${builtins.toString ./run-emulator}";
  androidUserHome = "${userHome}/.android";
  androidAvdHome = "${androidUserHome}/avd";

  qtBas = pkgs.qt5.qtbase.override { developerBuild = true; };
in
pkgs.mkShell {
  name = "android-nix-playground";
  packages = [
    androidSdk
    androidEmulator
    platformTools
  ] ++ (with pkgs; [
    git
    android-studio
    android-studio.unwrapped
    gradle
    # qtemu
    # xorg.libxcb
    # virt-manager
    # libvirt
    glibc
    debianutils
    #qt5.wrapQtAppsHook
    #qtBase
    qemu_full
  ]);

  # nativeBuildInputs = with pkgs; [
  # ];

  LANG = "C.UTF-8";
  LC_ALL = "C.UTF-8";

  # JAVA_HOME = jdk;
  # Note: ANDROID_HOME is deprecated. Use ANDROID_SDK_ROOT.
  ANDROID_SDK_ROOT = androidSdkHome;
  ANDROID_HOME = androidSdkHome;
  ANDROID_NDK_ROOT = "${androidSdkHome}/ndk-bundle";

  # Ensures that we don't have to use a FHS env by using the nix store's aapt2.
  GRADLE_OPTS = "-Dorg.gradle.project.android.aapt2FromMavenOverride=${aapt2}";

  HOME = userHome;
  USER_HOME = userHome;
  GRADLE_USER_HOME = "${userHome}/.gradle";
  IDEA_VM_OPTIONS = "${userHome}/.idea-bin/idea64.vmoptions";
  IDEA_PROPERTIES = "${userHome}/.idea-bin/idea.properties";
  ANDROID_USER_HOME = "${androidUserHome}";
  ANDROID_AVD_HOME = "${androidAvdHome}";
  #QT_PLUGIN_PATH = "${qtBase}/${qtBase.qtPluginPrefix}";

  shellHook = ''
    mkdir -p ${androidAvdHome}
    # Add cmake to the path.
    cmake_root="$(echo "$ANDROID_HOME/cmake/${android.versions.cmake}"*/)"
    export PATH="$cmake_root/bin:$PATH"
    # Write out local.properties for Android Studio.
    cat <<EOF > local.properties
      # This file was automatically generated by nix-shell.
      sdk.dir=$ANDROID_SDK_ROOT
      ndk.dir=$ANDROID_NDK_ROOT
      cmake.dir=$cmake_root
    EOF

    # ln -s ${androidEmulator}/bin/run-test-emulator ${runEmulator}
    # wrapProgram ${runEmulator} --prefix QT_PLUGIN_PATH : "${pkgs.qt5.qtbase}/${pkgs.qt5.qtbase.qtPluginPrefix}"
  '';
}

